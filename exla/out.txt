Using libexla.so from /Users/paulo.valente/Library/Caches/xla/exla/elixir-1.15.4-erts-14.0.2-xla-0.6.0-exla-0.7.0-dev-a5kburw7sh55aji5jiw375twh4/libexla.so
make: `/Users/paulo.valente/coding/nx/exla/_build/dev/lib/exla/priv/libexla.so' is up to date.
[lib/exla/defn.ex:2139: EXLA.Defn.to_if/5]
{pred_op, Value.get_shape(pred_op)} #=> {%EXLA.MLIR.Value{
   ref: #Reference<0.1191803676.1280180226.16438>,
   function: %EXLA.MLIR.Function{
     module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16420>},
     ref: #Reference<0.1191803676.1280180226.16423>,
     name: "main",
     return_shape: %EXLA.Shape{
       ref: #Reference<0.1191803676.1280180226.16422>,
       dims: {1},
       dtype: {:tuple,
        [
          %EXLA.Shape{
            ref: #Reference<0.1191803676.1280180226.16421>,
            dims: {},
            dtype: {:s, 64}
          }
        ]}
     }
   }
 },
 %EXLA.Shape{
   ref: #Reference<0.1191803676.1280180226.16439>,
   dims: {},
   dtype: {:u, 8}
 }}

====if_branch_computation=====
====if_branch_computation=====
====if_branch_computation=====
====if_branch_computation=====
==== before adding if ====
==== before adding if ====
[lib/exla/defn.ex:2156: EXLA.Defn.to_if/5]
%{
  pred: pred,
  pred_op: pred_op,
  pred_op_shape: Value.get_shape(pred_op),
  on_true: on_true,
  true_args: true_args,
  false_args: false_args,
  true_comp: true_comp,
  false_comp: false_comp
} #=> %{
  pred: #Nx.Tensor<
    u8
    
    Nx.Defn.Expr
    parameter a:0    s64
    b = equal a, 1   u8
  >,
  false_args: [
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16433>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16420>
        },
        ref: #Reference<0.1191803676.1280180226.16423>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16422>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16421>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    }
  ],
  false_comp: %EXLA.MLIR.Function{
    module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16420>},
    ref: #Reference<0.1191803676.1280180227.17688>,
    name: "main-if-false-324",
    return_shape: %EXLA.Shape{
      ref: #Reference<0.1191803676.1280180227.17687>,
      dims: {},
      dtype: {:s, 64}
    }
  },
  on_true: #Nx.Tensor<
    s64
    
    Nx.Defn.Expr
    parameter a:0    s64
    b = equal a, 1   u8
    c = add b, a     s64
    d = add 10, c    s64
  >,
  pred_op: %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16438>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16420>},
      ref: #Reference<0.1191803676.1280180226.16423>,
      name: "main",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16422>,
        dims: {1},
        dtype: {:tuple,
         [
           %EXLA.Shape{
             ref: #Reference<0.1191803676.1280180226.16421>,
             dims: {},
             dtype: {:s, 64}
           }
         ]}
      }
    }
  },
  pred_op_shape: %EXLA.Shape{
    ref: #Reference<0.1191803676.1280180227.17706>,
    dims: {},
    dtype: {:u, 8}
  },
  true_args: [
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16438>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16420>
        },
        ref: #Reference<0.1191803676.1280180226.16423>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16422>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16421>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    },
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16430>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16420>
        },
        ref: #Reference<0.1191803676.1280180226.16423>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16422>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16421>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    }
  ],
  true_comp: %EXLA.MLIR.Function{
    module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16420>},
    ref: #Reference<0.1191803676.1280180227.17668>,
    name: "main-if-true-292",
    return_shape: %EXLA.Shape{
      ref: #Reference<0.1191803676.1280180227.17667>,
      dims: {},
      dtype: {:s, 64}
    }
  }
}

"if"
[
  %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16438>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16420>},
      ref: #Reference<0.1191803676.1280180226.16423>,
      name: "main",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16422>,
        dims: {1},
        dtype: {:tuple,
         [
           %EXLA.Shape{
             ref: #Reference<0.1191803676.1280180226.16421>,
             dims: {},
             dtype: {:s, 64}
           }
         ]}
      }
    }
  },
  %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16430>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16420>},
      ref: #Reference<0.1191803676.1280180226.16423>,
      name: "main",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16422>,
        dims: {1},
        dtype: {:tuple,
         [
           %EXLA.Shape{
             ref: #Reference<0.1191803676.1280180226.16421>,
             dims: {},
             dtype: {:s, 64}
           }
         ]}
      }
    }
  }
]
got all args
before convert pred
after convert pred
before create IfOp
created if_op
spliced true blocks
spliced false blocks
replaced block arguments
got result
if result ref: #Reference<0.1191803676.1280180226.16474>
==== after adding if ====
==== after adding if ====
f: #Nx.Tensor<
  s64
  EXLA.Backend<host:0, 0.1191803676.1280180244.15739>
  12
>
f: #Nx.Tensor<
  s64
  EXLA.Backend<host:0, 0.1191803676.1280180244.15740>
  -10
>
[lib/exla/defn.ex:2139: EXLA.Defn.to_if/5]
{pred_op, Value.get_shape(pred_op)} #=> {%EXLA.MLIR.Value{
   ref: #Reference<0.1191803676.1280180226.16565>,
   function: %EXLA.MLIR.Function{
     module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
     ref: #Reference<0.1191803676.1280180226.16557>,
     name: "main",
     return_shape: %EXLA.Shape{
       ref: #Reference<0.1191803676.1280180226.16556>,
       dims: {1},
       dtype: {:tuple,
        [
          %EXLA.Shape{
            ref: #Reference<0.1191803676.1280180226.16555>,
            dims: {},
            dtype: {:s, 64}
          }
        ]}
     }
   }
 },
 %EXLA.Shape{
   ref: #Reference<0.1191803676.1280180226.16566>,
   dims: {},
   dtype: {:u, 8}
 }}

====if_branch_computation=====
====if_branch_computation=====
[lib/exla/defn.ex:2139: EXLA.Defn.to_if/5]
{pred_op, Value.get_shape(pred_op)} #=> {%EXLA.MLIR.Value{
   ref: #Reference<0.1191803676.1280180226.16597>,
   function: %EXLA.MLIR.Function{
     module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
     ref: #Reference<0.1191803676.1280180226.16593>,
     name: "main-if-false-451",
     return_shape: %EXLA.Shape{
       ref: #Reference<0.1191803676.1280180226.16592>,
       dims: {},
       dtype: {:s, 64}
     }
   }
 },
 %EXLA.Shape{
   ref: #Reference<0.1191803676.1280180226.16598>,
   dims: {},
   dtype: {:u, 8}
 }}

====if_branch_computation=====
====if_branch_computation=====
====if_branch_computation=====
====if_branch_computation=====
==== before adding if ====
==== before adding if ====
[lib/exla/defn.ex:2156: EXLA.Defn.to_if/5]
%{
  pred: pred,
  pred_op: pred_op,
  pred_op_shape: Value.get_shape(pred_op),
  on_true: on_true,
  true_args: true_args,
  false_args: false_args,
  true_comp: true_comp,
  false_comp: false_comp
} #=> %{
  pred: #Nx.Tensor<
    u8
    
    Nx.Defn.Expr
    parameter a:0    s64
    b = equal a, 2   u8
  >,
  false_args: [
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16595>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16554>
        },
        ref: #Reference<0.1191803676.1280180226.16593>,
        name: "main-if-false-451",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16592>,
          dims: {},
          dtype: {:s, 64}
        }
      }
    }
  ],
  false_comp: %EXLA.MLIR.Function{
    module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
    ref: #Reference<0.1191803676.1280180226.16618>,
    name: "main-if-false-451-if-false-515",
    return_shape: %EXLA.Shape{
      ref: #Reference<0.1191803676.1280180226.16617>,
      dims: {},
      dtype: {:s, 64}
    }
  },
  on_true: #Nx.Tensor<
    s64
    
    Nx.Defn.Expr
    parameter a:0   s64
    b = negate a    s64
  >,
  pred_op: %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16597>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
      ref: #Reference<0.1191803676.1280180226.16593>,
      name: "main-if-false-451",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16592>,
        dims: {},
        dtype: {:s, 64}
      }
    }
  },
  pred_op_shape: %EXLA.Shape{
    ref: #Reference<0.1191803676.1280180226.16636>,
    dims: {},
    dtype: {:u, 8}
  },
  true_args: [
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16594>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16554>
        },
        ref: #Reference<0.1191803676.1280180226.16593>,
        name: "main-if-false-451",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16592>,
          dims: {},
          dtype: {:s, 64}
        }
      }
    }
  ],
  true_comp: %EXLA.MLIR.Function{
    module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
    ref: #Reference<0.1191803676.1280180226.16606>,
    name: "main-if-false-451-if-true-483",
    return_shape: %EXLA.Shape{
      ref: #Reference<0.1191803676.1280180226.16605>,
      dims: {},
      dtype: {:s, 64}
    }
  }
}

"if"
[
  %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16594>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
      ref: #Reference<0.1191803676.1280180226.16593>,
      name: "main-if-false-451",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16592>,
        dims: {},
        dtype: {:s, 64}
      }
    }
  }
]
got all args
before convert pred
after convert pred
before create IfOp
created if_op
spliced true blocks
spliced false blocks
replaced block arguments
got result
if result ref: #Reference<0.1191803676.1280180226.16647>
==== after adding if ====
==== after adding if ====
====if_branch_computation=====
====if_branch_computation=====
==== before adding if ====
==== before adding if ====
[lib/exla/defn.ex:2156: EXLA.Defn.to_if/5]
%{
  pred: pred,
  pred_op: pred_op,
  pred_op_shape: Value.get_shape(pred_op),
  on_true: on_true,
  true_args: true_args,
  false_args: false_args,
  true_comp: true_comp,
  false_comp: false_comp
} #=> %{
  pred: #Nx.Tensor<
    u8
    
    Nx.Defn.Expr
    parameter a:0    s64
    b = equal a, 1   u8
  >,
  false_args: [
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16558>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16554>
        },
        ref: #Reference<0.1191803676.1280180226.16557>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16556>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16555>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    },
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16561>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16554>
        },
        ref: #Reference<0.1191803676.1280180226.16557>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16556>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16555>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    }
  ],
  false_comp: %EXLA.MLIR.Function{
    module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
    ref: #Reference<0.1191803676.1280180226.16593>,
    name: "main-if-false-451",
    return_shape: %EXLA.Shape{
      ref: #Reference<0.1191803676.1280180226.16592>,
      dims: {},
      dtype: {:s, 64}
    }
  },
  on_true: #Nx.Tensor<
    s64
    
    Nx.Defn.Expr
    parameter a:0   s64
    parameter b:1   s64
    c = add a, b    s64
  >,
  pred_op: %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16565>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
      ref: #Reference<0.1191803676.1280180226.16557>,
      name: "main",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16556>,
        dims: {1},
        dtype: {:tuple,
         [
           %EXLA.Shape{
             ref: #Reference<0.1191803676.1280180226.16555>,
             dims: {},
             dtype: {:s, 64}
           }
         ]}
      }
    }
  },
  pred_op_shape: %EXLA.Shape{
    ref: #Reference<0.1191803676.1280180226.16672>,
    dims: {},
    dtype: {:u, 8}
  },
  true_args: [
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16558>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16554>
        },
        ref: #Reference<0.1191803676.1280180226.16557>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16556>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16555>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    },
    %EXLA.MLIR.Value{
      ref: #Reference<0.1191803676.1280180226.16561>,
      function: %EXLA.MLIR.Function{
        module: %EXLA.MLIR.Module{
          ref: #Reference<0.1191803676.1280180226.16554>
        },
        ref: #Reference<0.1191803676.1280180226.16557>,
        name: "main",
        return_shape: %EXLA.Shape{
          ref: #Reference<0.1191803676.1280180226.16556>,
          dims: {1},
          dtype: {:tuple,
           [
             %EXLA.Shape{
               ref: #Reference<0.1191803676.1280180226.16555>,
               dims: {},
               dtype: {:s, 64}
             }
           ]}
        }
      }
    }
  ],
  true_comp: %EXLA.MLIR.Function{
    module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
    ref: #Reference<0.1191803676.1280180226.16576>,
    name: "main-if-true-419",
    return_shape: %EXLA.Shape{
      ref: #Reference<0.1191803676.1280180226.16575>,
      dims: {},
      dtype: {:s, 64}
    }
  }
}

"if"
[
  %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16558>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
      ref: #Reference<0.1191803676.1280180226.16557>,
      name: "main",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16556>,
        dims: {1},
        dtype: {:tuple,
         [
           %EXLA.Shape{
             ref: #Reference<0.1191803676.1280180226.16555>,
             dims: {},
             dtype: {:s, 64}
           }
         ]}
      }
    }
  },
  %EXLA.MLIR.Value{
    ref: #Reference<0.1191803676.1280180226.16561>,
    function: %EXLA.MLIR.Function{
      module: %EXLA.MLIR.Module{ref: #Reference<0.1191803676.1280180226.16554>},
      ref: #Reference<0.1191803676.1280180226.16557>,
      name: "main",
      return_shape: %EXLA.Shape{
        ref: #Reference<0.1191803676.1280180226.16556>,
        dims: {1},
        dtype: {:tuple,
         [
           %EXLA.Shape{
             ref: #Reference<0.1191803676.1280180226.16555>,
             dims: {},
             dtype: {:s, 64}
           }
         ]}
      }
    }
  }
]
got all args
before convert pred
after convert pred
before create IfOp
created if_op
spliced true blocks
spliced false blocks
replaced block arguments
got result
if result ref: #Reference<0.1191803676.1280180226.16683>
==== after adding if ====
==== after adding if ====
g: #Nx.Tensor<
  s64
  EXLA.Backend<host:0, 0.1191803676.1280180244.15742>
  11
>
g: #Nx.Tensor<
  s64
  EXLA.Backend<host:0, 0.1191803676.1280180244.15743>
  -2
>
g: #Nx.Tensor<
  s64
  EXLA.Backend<host:0, 0.1191803676.1280180244.15744>
  -10
>

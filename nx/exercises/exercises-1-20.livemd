# Exercises: 1-20

```elixir
Mix.install([{:nx, "~> 0.6"}])
```

## Introduction

Inspired by the Python notebook _100 Numpy Exercises_:

https://www.kaggle.com/code/utsav15/100-numpy-exercises/notebook

## 1-10

**1. Install `Nx` in a Livebook. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Mix.install([{:nx, "~> 0.6"}])
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**2. Create a 1-D tensor of 10 zeros. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.broadcast(0, {10})
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**3. Find the number of elements in `tensor_03`. (★☆☆)**

```elixir
tensor_03 = Nx.tensor([[1, 2, 3], [4, 5, 6]])
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.size(tensor_03)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**4. Find the number of bytes of memory in `tensor_04`. (★☆☆)**

```elixir
tensor_04 = Nx.tensor([[1, 2, 3], [4, 5, 6]])
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.byte_size(tensor_04)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**5. Use `IEx.Helpers` to print the documentation of the `Nx.add/2` function. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  import IEx.Helpers
  h Nx.add
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**6. Create a tensor of zeros of size 10 but where the fifth value is 1. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  zeros = Nx.broadcast(0, {10})
  index = Nx.tensor([4])
  Nx.indexed_put(zeros, index, 1)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**7. Create a tensor with values ranging from 10 to 49. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.linspace(10, 49, n: 39, type: :s8)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**8. Reverse `tensor_08` (first element becomes last). (★☆☆)**

```elixir
tensor_08 = Nx.tensor([2, 4, 6, 8])
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.reverse(tensor_08)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**9. Create a 3x3 tensor with values ranging from 0 to 8. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.iota({3, 3})
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**10a. Given an initial `tensor_10`, build a "mask" of non-zero elements. That is, build a second tensor with the same shape as the original, but that has a 1 wherever the original has a non-zero element and a 0 elsewhere. (★☆☆)**

```elixir
tensor_10 = Nx.tensor([1, 2, 0, 0, 4, 0])
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  mask = Nx.not_equal(tensor_10, 0)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**10b. Use the mask from 10a to replace each 0 from `tensor_10` with -1. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.select(mask, tensor_10, -1)
  ```

  </div>
</details>

## 11-20

**11. Create a 3x3 identity tensor. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.eye(3)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**12. Create a 3x3x3 tensor with random values. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  key = Nx.Random.key(0)
  {random, _} = Nx.Random.normal(key, shape: {3, 3, 3})
  random
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**13. Create a random 10x10 tensor then find its minimum and maximum values. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  key = Nx.Random.key(0)
  {tensor_13, _} = Nx.Random.normal(key, shape: {10, 10})

  %{
    min: Nx.reduce_min(tensor_13),
    max: Nx.reduce_max(tensor_13)
  }
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**14. Create a 1D tensor of size 30 then find its mean. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  key = Nx.Random.key(0)
  {tensor_14, _} = Nx.Random.normal(key, shape: {30})

  Nx.mean(tensor_14)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**15. Create a 4x4 tensor with 1 on the border and 0 inside. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.broadcast(1, {4, 4})
  |> Nx.put_slice([1, 1], Nx.broadcast(0, {2, 2}))
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**16. Add a border of 0 around `tensor_16` (end result will be a 5x5 tensor). (★☆☆)**

```elixir
tensor_16 = Nx.broadcast(1, {3, 3})
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.pad(tensor_16, 0, [{1, 1, 0}, {1, 1, 0}])
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**17. Determine the results of the following expressions. (★☆☆)**

```elixir
nan = Nx.Constants.nan()
Nx.multiply(0, nan)
Nx.equal(nan, nan)
Nx.greater(nan, nan)
Nx.subtract(nan, nan)

# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```
  #Nx.Tensor<
    f32
    NaN
  >
  #Nx.Tensor<
    u8
    0
  >
  #Nx.Tensor<
    u8
    0
  >
  #Nx.Tensor<
    f32
    NaN
  >
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**18. Create a 5x5 tensor with values 1,2,3,4 just below the diagonal. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.tensor([1, 2, 3, 4])
  |> Nx.make_diagonal(offset: -1)
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**19. Create a 8x8 tensor of 0 and 1 in a checkerboard pattern with 0 as the first element. (★☆☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  Nx.tensor([[0, 1], [1, 0]])
  |> Nx.tile([4, 4])
  ```

  </div>
</details>

<!-- livebook:{"break_markdown":true} -->

**20. Find the (x,y,z) index ([row major](https://en.wikipedia.org/wiki/Row-_and_column-major_order)) of the 100th element of a 6x7x8 tensor. (★★☆)**

```elixir
# Add your solution here.
:ok
```

<details class="rounded-lg border-2 border-green-bright-300 p-2">
  <summary class="cursor-pointer font-bold mx-2">Example solution</summary>
  <div class="p-2">

  ```elixir
  defmodule Exercise20 do
    import Nx.Defn

    deftransform solve(shape, target) do
      dims = Tuple.to_list(shape)
      
      dims
      |> Enum.map_reduce({target, Enum.product(dims)}, fn dim, {remaining, step_size} ->
        step_size = div(step_size, dim)
        num_steps = div(remaining, step_size)
        {num_steps, {remaining - num_steps * step_size, step_size}}
      end)
      |> then(fn {indices, {0, 1}} -> indices end)
    end
  end

  Exercise20.solve({6, 7, 8}, 100)
  ```

  </div>
</details>
